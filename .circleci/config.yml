version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circle_workflow_id:
        type: string
         
    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.circle_workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.circle_workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.circle_workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.circle_workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      circle_workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/EoDKAyH7GvjZW54CjQsVuV/migration_<< parameters.circle_workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend tests
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend tests
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend code
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 2
            npm update path-parse --depth 3 
            npm update kind-of --depth 10
            npm install --save-dev webpack@5.73.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=Udapeople \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                                      
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backend_ec2_public_ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text) 
            echo "$backend_ec2_public_ip"  
            echo "$backend_ec2_public_ip" >> ~/env_vars.txt
            cat ~/env_vars.txt
            echo "$backend_ec2_public_ip" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - env_vars.txt
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:cc:82:ba:f5:41:0c:f6:ba:3d:d3:e9:f8:c1:b2:aa"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip curl nodejs npm openssh-client git
            pip install awscli
            aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend/src
            npm install
            npm run migrations >> migrations_dump.txt
            cat "Migration file" migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/src/migrations_dump.txt
              then
                  # If you are using kvdb.io, generate the bucket ID "EoDKAyH7GvjZW54CjQsVuV" in your local terminal first
                  curl https://kvdb.io/EoDKAyH7GvjZW54CjQsVuV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - revert-migrations: 
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar sudo
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
            node --version
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl)
            export API_URL="http://${API_URL}:3030"
            echo "${API_URL}" > .circleci/api_url.txt
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat .circleci/api_url.txt)
            echo "${API_URL}" > frontend/.env
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "0c:1c:3f:7d:d4:5f:7d:cd:6a:d7:02:b8:12:72:36:ca"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar
      - run:
          name: compress backend
          command: |
            tar -C /tmp/artifacts/backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/artifacts/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
     
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend,test-backend,scan-frontend,scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]